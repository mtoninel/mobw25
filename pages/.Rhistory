swirl()
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[c(0)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 = 7)
(5 = 7) != TRUE
(5 == 7) != TRUE
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints) > 7
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('Myfirst function!')
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, divisor = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
telegram("hello")
submit()
submit()
submit()
submit()
submit()
mad_libs(mornago, strano, lettera)
args(mad_libs)
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply(list, function)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flag$population, flag$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, 100, 0,7)
rbinom(1, 100, 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
rep(100, rpois(5, 10))
rep(rpois(5, 10), 100)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclasst2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t3)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data("cars")
data(cars)
?cars
head(cars)
plogis()
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plogis(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
head(mtcars)
summary(mtcars)
class(mtcars)
table(mtcars$mpg)
str(mtcars)
sapply(mtcars$mpg, mean)
sapply(mtcars, mean)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?sort
x <- c(0, 1, 2, 3, 4, 5, 6)
sort(x, decreasing = FALSE)
sort(x, decreasing = TRUE)
x <- matrix(1:100, ncol = 10)
x
matrixx1 <- sort(x, ncol(2))
matrix(rnorm([1:100]), 20, 5)
?matrix
matrix([1:10], 2, 5)
ve <- sample(rnorm(10))
ve <- sample(rnorm(10), size = 100)
ve <- sample(rnorm(1000), size = 100)
dim(ve)
matrix(ve, 20, 5)
mat <- matrix(ve, 20, 5)
cbind(c("esselunga", "iper", "conad", "tigros", "market"), mat)
rbind(c("esselunga", "iper", "conad", "tigros", "market"), mat)
newmat <- rbind(c("esselunga", "iper", "conad", "tigros", "market"), mat)
data.frame(newmat)
class(newmat)
mat <- matrix(ve, 20, 5)
View(newmat)
View(newmat)
frame <- data.frame(mat)
frame
colnames(frame, c("height", "width", "depth", "repeats", "chrom"))
?colnames
variables <- c("A", "B", "C", "D", "E")
colnames(frame, variables)
rownames(frame, variables)
colnames(frame)
colnames(frame) <- variables
frame
plot(frame)
View(frame)
smallmat <- matrix(ve, 50, 2)
plot(smallmat)
lapply(frame, class)
View(newmat)
getwd()
ls()
rm(newmat)
?boxplot
sapply(frame, mean)
sapply(frame, sum)
mean(sapply(frame, sum))
sapply(frame, range)
variable.names(frame)
table(frame$C)
str(frame)
ncol(frame)
ncol(frame) <- 7
tapply(frame$A, frame$D, mean)
thep <- plot(frame)
smallmat
class(smallmat)
data.frame(smallmat)
class(smallmat)
str(smallmat)
?data.frame
as.data.frame(smallmat)
class(smallmat)
colnames(smallmat) <- c("cars", "accidents")
plot(smallmat)
?rnorm
?rbinom
swirl::swirl()
str(flags)
sapply(flags, unique)
vapply(flags, unique, FUN.VALUE = 1, ...)
vapply(flags, unique, FUN.VALUE = numeric(1), ...)
vapply(flags, unique, FUN.VALUE = numeric(1))
ok()
play
swirl::play()
nxt()
nxt()
swirl::nxt()
swie
swirl::main()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix ,_ my_vector
my_matrix <- my_vector
?matrix
ma
my_matrix <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(data = 1:20,nrow = 4,ncol = 5)
my_matrix2
my_matrix2 <- matrix(1:20, 4, 5)
swirl::skip()
my_matrix2 <- matrix(1:20,nrow =  4,ncol =  5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
swirl::skip()
swirl::bye()
swirl()
swirl
swirl::main()
rw2d_loop_nopre <- function(n) {
xpos = ypos = 0
xdir = c(T, F)
pm1 = c(1,-1)
for (i in 2:n)
{
if (sample(xdir, 1)) {
xpos[i] = xpos[i-1] + sample(pm1, 1)
ypos[i] = ypos[i-1]
}
else {
xpos[i] = xpos[i-1]
ypos[i] = ypos[i-1] + sample(pm1, 1)
}
}
data.frame(x=xpos, y=ypos)
}
# rw2d_loop_nopre(1e5) # for profiling
# ggplot2::qplot(x, y, data=rw2d_loop_nopre(1000), geom='path') # plot check
View(rw2d_loop_nopre)
rw2d_loop_nopre(100)
install.packages("ggplot2")
tab <- read.table('Users/mtoninel/Downloads/QualityIndicators.csv')
tab <- read.table('/Users/mtoninel/Downloads/QualityIndicators.csv')
install.packages('pagedown')
install.packages('here')
print('ciao')
gc()
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', warning = FALSE, message = FALSE)
tmp <- readRDS
cwd()
wd()
pwd()
getcwd()
getwd()
tmp <- readRDS("./Downloads/GSE210534_ensdb_105_dge_list_final")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
tmp <- readRDS("./Downloads/GSE210534_ensdb_105_dge_list_final")
library(edgeR)
install.packages("locfit")
sessionInfo()
install.packages("https://cran.r-project.org/src/contrib/Archive/locfit/locfit_1.5-9.4.tar.gz", repos=NULL, type="source")
library(edgeR)
tmp <- readRDS("./Downloads/GSE210534_ensdb_105_dge_list_final")
tmp$counts
tmp$samples
tmp$genes
dim(tmp)
dim(tmp$counts)
head(tmp$counts)
tmp$counts[rowSums(tmp$counts) > 100,]
dim(tmp$counts[rowSums(tmp$counts) > 100,])
dim(tmp$counts[rowSums(tmp$counts) > 0,])
dim(tmp$counts[rowSums(tmp$counts) > 100,])
write.csv(tmp$counts, "./Desktop/raw_counts.csv", quote=FALSE)
write.csv(tmp$genes, "./Desktop/genes_info.csv", quote=FALSE)
write.csv(tmp$samples, "./Desktop/samples_info.csv", quote=FALSE)
library(googledrive)
drive_find(n_max=30)
drive_find(pattern="MOBW2023/*csv")
drive_find(pattern="*.csv")
drive_find(pattern="MOBW2023")
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', warning = FALSE, message = FALSE)
# Load the objects from the google drive folder
library(googledrive)
# File paths with URL
counts <- drive_example_remote("raw_counts.csv")  %>% drive_read_string() %>% read.csv(text = .)
counts <- drive_example_remote("raw_counts.csv")
drive_find(n_max=30)
counts <- drive_example_remote("raw_counts.csv")
files <- drive_find(n_max=30)
counts <- drive_example_remote(files[files$name == "raw_counts.csv"])
files
files[files$name == "raw_counts.csv",]
counts <- drive_example_remote(files[files$name == "raw_counts.csv",])
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = .)
head(counts)
# Load the objects from the google drive folder
library(googledrive)
# Load files
files <- drive_find(n_max=30)
# File paths with URL
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = .)
samples <- files[files$name == "samples_info.csv",] %>% drive_read_string() %>% read.csv(text = .)
genes <- files[files$name == "genes_info.csv",] %>% drive_read_string() %>% read.csv(text = .)
# Load the objects from the google drive folder
library(googledrive)
# Load files
files <- drive_find(n_max=30)
# File paths with URL
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = .)
samples <- files[files$name == "samples_info.csv",] %>% drive_read_string() %>% read.csv(text = .)
# Load the objects from the google drive folder
library(googledrive)
# Load files
files <- drive_find(n_max=30)
# File paths with URL
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = .) %>% as.tibble()
library(tidyverse)
# Load the objects from the google drive folder
library(googledrive)
# Load files
files <- drive_find(n_max=30)
# File paths with URL
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = .) %>% as.tibble()
samples <- files[files$name == "samples_info.csv",] %>% drive_read_string() %>% read.csv(text = .) %>% as.tibble()
head(counts)
# Check out the counts
head(counts, 10)
# How many rows and columns does our count table have?
dim(counts)
head(samples, 10)
head(samples, 10)
# Load the objects from the google drive folder
library(googledrive)
# Load files
files <- drive_find(n_max=30)
# File paths with URL
counts <- files[files$name == "raw_counts.csv",] %>% drive_read_string() %>% read.csv(text = ., row.names="X") %>% as.tibble()
samples <- files[files$name == "samples_info.csv",] %>% drive_read_string() %>% read.csv(text = ., row.names="X") %>% as.tibble()
# Check out the counts
head(counts, 10)
# How many rows and columns does our count table have?
dim(counts)
head(samples, 10)
View(tmp)
# Install packages from CRAN
install.packages("tidyverse")
# Install packages from Bioconductor
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
